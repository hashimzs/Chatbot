@using chatbot2.Components
@inherits LayoutComponentBase
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime


<CascadingValue Value="IsCollapsed">
    <section class="layout-wrapper @SideBarClass">
        <Sidebar IsCollapsed="IsCollapsed" IsExpanded="IsExpanded" />
        <div class="body-wrapper">
            @Body
        </div>
    </section>

    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="SidebarToggle">
        <div class="sidebar-fa-bar @SideBarClass">
            <IconButton IconClass="fa-solid fa-bars" OnClick="ToggleBarClickedHandler" />
        </div>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>

    <Microsoft.AspNetCore.Components.Sections.SectionContent SectionName="BodyToggle">
        <div class="body-fa-bar @SideBarClass">
            <IconButton IconClass="fa-solid fa-bars" OnClick="ToggleBarClickedHandler" />
        </div>
    </Microsoft.AspNetCore.Components.Sections.SectionContent>
    <div class="close-sidebar @SideBarClass2" @onclick="()=>IsExpanded=!IsExpanded">
    </div>
</CascadingValue>

@code {
    /// <summary>
    /// this bool is for collapsing the sidebar when the screen is above 1000px
    /// </summary>
    public bool IsCollapsed { get; set; }
    /// <summary>
    /// this bool is for expanding the sidebar when the screen is below 1000px
    /// </summary>
    public bool IsExpanded { get; set; }
    public string SideBarClass { get => IsCollapsed ? "collapse" : ""; }
    public string SideBarClass2 { get => IsExpanded ? "expand" : ""; }

    private async Task<int> GetScreenWidth()
    {
        return await JSRuntime.InvokeAsync<int>("getScreenWidth");
    }

    public async Task ToggleBarClickedHandler()
    {
        var width = await GetScreenWidth();

        if (width > 1000)
            IsCollapsed = !IsCollapsed;
        else
            IsExpanded = !IsExpanded;
    }

}