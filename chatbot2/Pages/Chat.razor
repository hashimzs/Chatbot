@page "/chat/{Id:int}"
@using Chatbot.Application.Shared
@using chatbot2.Components
@using chatbot2.Services
@implements IDisposable


<PageLayout>
    <ChildContent>
        <div id="mcon" class="messages-container">
            <div class="messages-inner-container reverse">
                <InfiniteScrollList Context="message" TValue="ChatMessageDto" Url="@($"api/chat/{Id}")" OnFirstLoad="()=>ScrollBottomAfterRender=true">
                    <ChatMessageBox Message="message" />
                </InfiniteScrollList>
            </div>
            <div class="messages-inner-container">
                @foreach (var message in Messages)
                {
                    <ChatMessageBox Message="message" />
                }
                @if (GeneratingResponse)
                {
                    <div class="loading-indicator">
                        <LoadingIndicator  ShowLoadingText/>
                    </div>
                }
            </div>
            @if (ErrorOccured)
            {
                <div class="try-again-container">
                    <MdButton OnClick="TryAgain">
                        Try again
                    </MdButton>
                </div>
            }
        </div>
    </ChildContent>
    <Footer>
        <chatbot2.Components.MdTextBox Placeholder="Talk to the advisor" IsDisabled="GeneratingResponse" OnEnterClicked="OnEnterClickedHanlder" />
    </Footer>
</PageLayout>




@code {
    [Inject]
    public NavigationManager navigationManager { get; set; } = null!;
    [Inject]
    public ChatService chatService { get; set; } = null!;
    [Inject]
    public IJSRuntime JSRuntime { get; set; } = null!;
    [Parameter]
    public int Id { get; set; }

    List<ChatMessageDto> Messages = new List<ChatMessageDto>();

    public bool ScrollBottomAfterRender { get; set; } = true;
    public bool GeneratingResponse { get; set; } = false;

    public bool ErrorOccured { get; set; }

    protected override void OnInitialized()
    {
        this.chatService.OnChatDeleted += OnChatDeleted;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (ScrollBottomAfterRender)
        {
            await ScrollToBottom();
            ScrollBottomAfterRender = false;
        }

    }

    public void OnChatDeleted(int Id)
    {
        if (this.Id == Id)
            navigationManager.NavigateTo("");
    }

    public async Task OnEnterClickedHanlder(string Message)
    {
        try
        {
            ErrorOccured = false;

            var NewMessage = new ChatMessageDto
                {
                    ChatId = Id,
                    Message = Message,
                    IsUser = true,
                };

            Messages.Add(NewMessage);

            await GetResponse(NewMessage);
        }
        catch (Exception)
        {
            ErrorOccured = true;
            GeneratingResponse = false;
        }
    }

    public async Task GetResponse(ChatMessageDto chatMessageDto)
    {
        try
        {
            GeneratingResponse = true;
            ScrollBottomAfterRender = true;

            var response = await this.chatService.GetBotRespose(chatMessageDto);
            GeneratingResponse = false;
            Messages.Add(response);

            ScrollBottomAfterRender = true;
        }
        catch (Exception)
        {
            ErrorOccured = true;
            GeneratingResponse = false;
        }
    }

    public async Task TryAgain()
    {
        ErrorOccured = false;

        var Message = this.Messages.LastOrDefault()?.Message;

        if (string.IsNullOrEmpty(Message))
            return;

        var NewMessage = new ChatMessageDto
            {
                ChatId = Id,
                Message = Message,
                IsUser = true,
            };

        await GetResponse(NewMessage);
    }

    async Task ScrollToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", "main-section");
    }

    public void Dispose()
    {
        this.chatService.OnChatDeleted -= OnChatDeleted;
    }
}

<style>
    .main-section {
        width: 100% !important;
    }
</style>